{
  "resourceType": "TestScript",
  "id": "hospitalnotification-patientstory-03",
  "meta": {
    "profile": [
      "http://touchstone.aegis.net/touchstone/fhir/testing/StructureDefinition/testscript"
    ]
  },
  "url": "medcom.dk",
  "status": "active",
  "date": "2022-07-13",
  "publisher": "MedCom",
  "contact": [
    {
      "name": "MedCom",
      "telecom": [
        {
          "system": "email",
          "value": "fhir@medcom.dk",
          "use": "work"
        }
      ]
    }
  ],
  "copyright": "MedCom 2021",
  "name": "Inpatient admission - corrected.",
  "title": "Inpatient admission - corrected - PatientStory-03",
  "description": "Testing correct use codes and identifiers",
  "origin": [
    {
      "index": 1,
      "profile": {
        "system": "http://terminology.hl7.org/CodeSystem/testscript-profile-origin-types",
        "code": "FHIR-Client"
      }
    }
  ],
  "destination": [
    {
      "index": 1,
      "profile": {
        "system": "http://terminology.hl7.org/CodeSystem/testscript-profile-destination-types",
        "code": "FHIR-Server"
      }
    }
  ],
  "profile": [
    {
      "id": "hospitalnotification",
      "reference": "http://medcomfhir.dk/fhir/hospitalnotification/StructureDefinition/medcom-hospitalNotification-message"
    }
  ],
  "fixture": [
    {
      "id": "create-STIN-01",
      "autocreate": false,
      "autodelete": false,
      "resource": {
        "reference": "/FHIRSandbox/MedCom/HospitalNotificationTMS/fixtureHospitalNotificationSTIN.xml"
      }
    },
    {
      "id": "update-RE-STIN-02",
      "autocreate": false,
      "autodelete": false,
      "resource": {
        "reference": "/FHIRSandbox/MedCom/HospitalNotificationTMS/fixtureHospitalNotificationRE-STIN.xml"
      }
    }
  ],
  "variable": [
    {
      "name": "encounterResourceIdentifier",
      "expression": "Bundle.entry.resource.ofType(Encounter).identifier.value",
      "sourceId": "create-STIN-01"
    },
    {
      "name": "messageHeaderid-01",
      "expression": "Bundle.entry[0].fullUrl",
      "sourceId": "create-STIN-01"
    },
    {
      "name": "episodeOfCareIdentifier",
      "expression": "Bundle.entry.resource.ofType(Encounter).episodeOfCare.identifier.value",
      "sourceId": "create-STIN-01"
    },
    {
      "name": "searchParamIdentifier",
      "expression": "Bundle.entry.resource.ofType(MessageHeader).id",
      "sourceId": "create-STIN-01"
    }
  ],
  "test": [
    {
      "id": "hospitalnotification-create-STIN-01",
      "name": "Create a HospitalNotification STIN Message 01",
      "description": "Post HospitalNotification to the server.",
      "action": [
        {
          "operation": {
            "type": {
              "system": "http://terminology.hl7.org/CodeSystem/testscript-operation-codes",
              "code": "create"
            },
            "resource": "Bundle",
            "description": "Post a Hospitalnotification",
            "destination": 1,
            "encodeRequestUrl": true,
            "origin": 1,
            "responseId": "create-message-ok",
            "sourceId": "create-STIN-01"
          }
        },
        {
          "assert": {
            "description": "Confirm that the returned HTTP status is okay or created.",
            "direction": "response",
            "responseCode": "200,201",
            "operator": "in",
            "warningOnly": false
          }
        },
        {
          "assert": {
            "description": "Confirm that the client request payload contains a Bundle resource type.",
            "direction": "request",
            "resource": "Bundle",
            "warningOnly": false
          }
        },
        {
          "assert": {
            "description": "Confirm that the request resource contains the expected eventCoding.code.",
            "direction": "request",
            "expression": "Bundle.entry.resource.ofType(MessageHeader).event.as(Coding).select(code = 'hospital-notification-message').allTrue()",
            "warningOnly": false
          }
        },
        {
          "assert": {
            "description": "Confirm that the Encounter class of the request resource is IMP.",
            "direction": "request",
            "expression": "Bundle.entry.resource.ofType(Encounter).class.code",
            "operator": "equals",
            "value": "IMP",
            "warningOnly": false
          }
        },
        {
          "assert": {
            "description": "Confirm that the Encounter status of the request resource is in-progress.",
            "direction": "request",
            "expression": "Bundle.entry.resource.ofType(Encounter).status",
            "operator": "equals",
            "value": "in-progress",
            "warningOnly": false
          }
        },
        {
          "assert": {
            "description": "Confirm that the request resource contains the expected activity code.",
            "direction": "request",
            "expression": "Bundle.entry.resource.ofType(Provenance).where(activity.coding.code = 'admit-inpatient').exists()",
            "warningOnly": false
          }
        },
        {
          "assert": {
            "description": "Confirm that the report of admission flag is false.",
            "direction": "request",
            "expression": "Bundle.entry.resource.ofType(MessageHeader).extension.where(url='http://medcomfhir.dk/fhir/hospitalnotification/StructureDefinition/medcom-messaging-reportOfAdmissionExtension').value",
            "operator": "equals",
            "value": "false",
            "warningOnly": false
          }
        },
        {
          "assert": {
            "description": "Confirm that the target reference in Provenance equals MessageHeader.id",
            "direction": "request",
            "expression": "Bundle.entry.resource.ofType(Provenance).where(target.reference = %resource.entry[0].fullUrl).exists()",
            "warningOnly": false
          }
        }
      ]
    },
    {
      "id": "hospitalnotification-update-RE-STIN-02",
      "name": "Update a HospitalNotification Message 02",
      "description": "Update an existing message, by sending a new with reference to the previous",
      "action": [
        {
          "operation": {
            "type": {
              "system": "http://terminology.hl7.org/CodeSystem/testscript-operation-codes",
              "code": "update"
            },
            "resource": "Bundle",
            "description": "Update a message, corresponds to 'PUT' from API",
            "accept": "xml",
            "destination": 1,
            "encodeRequestUrl": true,
            "origin": 1,
            "params": "?identifier=${searchParamIdentifier}",
            "responseId": "update-message-02",
            "sourceId": "update-RE-STIN-02"
          }
        },
        {
          "assert": {
            "description": "Confirm that the previous MessageHeader fullURL is identical to Provenanve.entity.what",
            "direction": "request",
            "expression": "Bundle.entry.resource.ofType(Provenance).where(entity.what.reference = '${messageHeaderid-01}').count() = 1",
            "warningOnly": false
          }
        },
        {
          "assert": {
            "description": "Confirm that the role is set to revision. Not used when testing the first message in a stream",
            "direction": "request",
            "expression": "Bundle.entry.resource.ofType(Provenance).entity.role",
            "operator": "equals",
            "value": "revision",
            "warningOnly": false
          }
        },
        {
          "assert": {
            "description": "Confirm that the Encounter class of the request resource is IMP.",
            "direction": "request",
            "expression": "Bundle.entry.resource.ofType(Encounter).class.code",
            "operator": "equals",
            "value": "IMP",
            "warningOnly": false
          }
        },
        {
          "assert": {
            "description": "Confirm that the Encounter status of the request resource is in-progress.",
            "direction": "request",
            "expression": "Bundle.entry.resource.ofType(Encounter).status",
            "operator": "equals",
            "value": "in-progress",
            "warningOnly": false
          }
        },
        {
          "assert": {
            "description": "Confirm that the request resource contains the expected activity code.",
            "direction": "request",
            "expression": "Bundle.entry.resource.ofType(Provenance).where(activity.coding.code = 'revise-admit-inpatient').exists()",
            "warningOnly": false
          }
        }
      ]
    }
  ]
}
